<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>垃圾回收 on ptcx&#39;s blog</title>
    <link>https://ptcx.github.io/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</link>
    <description>Recent content in 垃圾回收 on ptcx&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>ptcx</copyright>
    <lastBuildDate>Sat, 16 Nov 2019 21:27:53 +0800</lastBuildDate>
    
	<atom:link href="https://ptcx.github.io/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GC引用计数法</title>
      <link>https://ptcx.github.io/post/gc_rc/</link>
      <pubDate>Sat, 16 Nov 2019 21:27:53 +0800</pubDate>
      
      <guid>https://ptcx.github.io/post/gc_rc/</guid>
      <description>引用计数法引入了计数器的概念，表示一个对象被多少个其他对象引用，这是一个无符号的整数值。 算法过程 在其他的GC算法中，当需要进行GC时会调用GC函数来清理垃圾空间。然而在引用计数法中没有明确启动GC的时刻，它在程序运行的过程中通过对象的引用计数器来进行内存管理。计数器在两种情况下会发生变化，一个是创建</description>
    </item>
    
    <item>
      <title>GC标记-清除算法</title>
      <link>https://ptcx.github.io/post/gc_mark_sweep/</link>
      <pubDate>Thu, 14 Nov 2019 19:51:14 +0800</pubDate>
      
      <guid>https://ptcx.github.io/post/gc_mark_sweep/</guid>
      <description>GC标记-清除算法是最早被发明的GC算法，跟字面意思一样，算法由两个阶段组成：标记阶段和清除阶段。标记阶段把所有活动对象都做上标记，然后再清除阶段把没有被标记的对象回收。 算法过程 可以用代码描述描述整个过程： 1 2 3 4 func mark_sweep() { mark_phase() sweep_phase() } 算法除了标记和清除过程，对于对象的分配我们也需要做相应的策略。 标记阶段 每个</description>
    </item>
    
    <item>
      <title>GC算法简介</title>
      <link>https://ptcx.github.io/post/gc_intro/</link>
      <pubDate>Thu, 14 Nov 2019 17:17:57 +0800</pubDate>
      
      <guid>https://ptcx.github.io/post/gc_intro/</guid>
      <description>GC定义 GC是Garbage Collection的简称，也就是我们常说的垃圾回收。GC把程序已分配但是不再使用的内存空间视为垃圾。GC程序主要做两件事： 找到内存空间里的垃圾 回收这部分内存，以供程序员后续能再次使用 对于没有GC的语言，程序员就必须手动管理内存，如果忘记释放内存空间，就容易发生内存泄露，</description>
    </item>
    
  </channel>
</rss>