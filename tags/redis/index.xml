<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>redis on ptcx&#39;s blog</title>
    <link>https://ptcx.github.io/tags/redis/</link>
    <description>Recent content in redis on ptcx&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>ptcx</copyright>
    <lastBuildDate>Wed, 13 Nov 2019 20:27:30 +0800</lastBuildDate>
    
	<atom:link href="https://ptcx.github.io/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redis网络模型(3)——客户端事件</title>
      <link>https://ptcx.github.io/post/redis_event_3/</link>
      <pubDate>Wed, 13 Nov 2019 20:27:30 +0800</pubDate>
      
      <guid>https://ptcx.github.io/post/redis_event_3/</guid>
      <description>redis启动后，设置完必要的事件后，调用aeMain进入事件循环，之后便阻塞在aeApiPoll上，等待客户端的连接。 客户端交互 客户端与服务器的交互状态主要有四种：建立连接、发送请求、返回数据、关闭连接。 建立连接 如果有客户端进行连接，则会触发服务器监听socket的可读事件，并调用networki</description>
    </item>
    
    <item>
      <title>Redis网络模型(2)——Server启动</title>
      <link>https://ptcx.github.io/post/redis_event_2/</link>
      <pubDate>Wed, 13 Nov 2019 20:20:50 +0800</pubDate>
      
      <guid>https://ptcx.github.io/post/redis_event_2/</guid>
      <description>有了高性能的事件驱动库之后，就可以开始构造Redis服务器程序了。一般，Server启动都会通过以下流程，然后阻塞在accept()上，等待客户端的连接： bind() ———&amp;gt; listen() ———&amp;gt; accept() Redis也不例外，但是因为Redis是单线程，如果阻塞在accept()上，就不能对客户端进行快速的回复，所以</description>
    </item>
    
    <item>
      <title>Redis网络模型(1)——事件驱动库</title>
      <link>https://ptcx.github.io/post/redis_event_1/</link>
      <pubDate>Wed, 13 Nov 2019 19:49:04 +0800</pubDate>
      
      <guid>https://ptcx.github.io/post/redis_event_1/</guid>
      <description>Redis很快，而且，Redis能很好的应对高并发的场景。但是，如果对Redis有过了解，就会知道Redis程序是单线程的。使用单线程却能保证如此高性能，有以下几个原因： 大部分数据放在内存中，减少磁盘I/O 大多数操作都是I/O操作，cpu密集型操作异步化，防止单个操作占用大量cpu 使用I/O多路复用</description>
    </item>
    
    <item>
      <title>缓存实现分布式锁</title>
      <link>https://ptcx.github.io/post/cache_lock/</link>
      <pubDate>Sat, 09 Nov 2019 12:36:50 +0800</pubDate>
      
      <guid>https://ptcx.github.io/post/cache_lock/</guid>
      <description>web程序一般都分布在不同的服务器上，如果需要对外部资源进行独占操作就必须使用锁机制，这时候就需要使用分布式锁。一般来说，使用zookeeper、etcd这种强一致性的服务来实现分布式锁是最可靠的。但是有时候条件受限，仅仅为了分布式锁就引入zookeeper还是太奢侈了，反而缓存是比较容易获得的资源</description>
    </item>
    
    <item>
      <title>Redis和Memcached，选谁？</title>
      <link>https://ptcx.github.io/post/redis_vs_memcached/</link>
      <pubDate>Thu, 07 Nov 2019 19:38:30 +0800</pubDate>
      
      <guid>https://ptcx.github.io/post/redis_vs_memcached/</guid>
      <description>对比 Redis和Memcached都能用于数据缓存，那这两种缓存服务在实际应用中该如何选择？Redis除了有更多的数据结构，在很多方面还是和Memcached不一样。我们在选择缓存服务时，通常需要考虑以下几点： 功能 速度 内存使用 缓存持久化 集群扩展 功能对比 Memcached只支持简单的key/value</description>
    </item>
    
  </channel>
</rss>